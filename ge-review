#!/bin/bash

txt_bold=`tput bold`
txt_normal=`tput sgr0`
no_difftool=0

function print_usage {
	echo "#    gtk-review"
	echo "#    "
	echo "#    Invokes the git difftool on all files modified between two git"
	echo "#    branches or tags, plus shows all added, deleted, copied and"
	echo "#    moved files. Useful in code reviews for viewing diffs."
	echo "#"
	echo "#    Usage: gtk review [branch or tag 1] [branch or tag 2]"
	echo "#"
	echo "#    Examples"
	echo "#"
	echo "#    gtk review"
	echo "#        Review current branch against master"
	echo "#    "
	echo "#    gtk review some_branch"
	echo "#        Review some_branch against current branch"
	echo "#    "
	echo "#    gtk review branch1 branch2"
	echo "#        Review branch1 against branch2, regardless of which branch"
	echo "#        you are currently on."
	echo "#    "
	echo "#    Branch names, tag names, commit Sha's or relative commit names"
	echo "#    (e.g. HEAD, HEAD~1, etc.) can be used."
	echo "#    "
	echo "#    Options:"
	echo "#    "
	echo "#    --no-difftool"
	echo "#        Show normal diffs on the command line rather than using"
	echo "#        the configured diff tool"
	echo "#    "
	echo "#    --help"
	echo "#        Display this help message"
}

case $1 in
	--no-difftool)
		shift
		no_difftool=1
		;;
	--help)
		shift
		print_usage
		exit $?
		;;
esac

if [ -z "$1" ]
then
	# review current branch with master
	ref_1="master"
	ref_2=`gtk current_branch`
elif [ -z "$2" ]
then
	# review current branch with branch passed in
	ref_1="$1"
	ref_2=`gtk current_branch`
else
	ref_1="$1"
	ref_2="$2"
fi

files_modified=`git diff --name-status -C $ref_1 $ref_2 | grep -E '^M' | sed 's/^M\s*\(.*\)/\1/'`
files_added=`git diff --name-status -C $ref_1 $ref_2 | grep -E '^A' | sed 's/^A\s*\(.*\)/\1/'`
files_deleted=`git diff --name-status -C $ref_1 $ref_2 | grep -E '^D' | sed 's/^D\s*\(.*\)/\1/'`
files_renamed=`git diff --name-status -C $ref_1 $ref_2 | grep -E '^R' | sed 's/^R\s*\(.*\)/\1/'`
files_copied=`git diff --name-status -C $ref_1 $ref_2 | grep -E '^C' | sed 's/^C\s*\(.*\)/\1/'`

echo "${txt_bold}Begin reviewing files added, renamed, copied, removed and modified between $ref_1 and $ref_2.${txt_normal}"
echo

if [ ! -z "$files_added" ]
then
	echo "${txt_bold}These files were added in $ref_2:${txt_normal}"
	echo "(git diff --name-status -C $ref_1 $ref_2 | grep -E '^A')"
	
	for file_name in $files_added
	do
		echo "    $file_name"
	done
	echo
fi

if [ ! -z "$files_renamed" ]
then
	echo "${txt_bold}These files were renamed in $ref_2:${txt_normal}"
	echo "(git diff --name-status -C $ref_1 $ref_2 | grep -E '^R')"
	
	for file_name in $files_renamed
	do
		echo "    $file_name"
	done
	echo
fi

if [ ! -z "$files_copied" ]
then
	echo "${txt_bold}These files were copied in $ref_2:${txt_normal}"
	echo "(git diff --name-status -C $ref_1 $ref_2 | grep -E '^C')"
	
	for file_name in $files_copied
	do
		echo "    $file_name"
	done
	echo
fi

if [ ! -z "$files_deleted" ]
then
	echo "${txt_bold}These files were deleted in $ref_2:${txt_normal}"
	echo "(git diff --name-status -C $ref_1 $ref_2 | grep -E '^D')"
	
	for file_name in $files_deleted
	do
		echo "    $file_name"
	done
	echo
fi

if [ ! -z "$files_modified" ]
then
	echo "${txt_bold}Showing diffs for files modified between $ref_1 and $ref_2${txt_normal}"
	echo "(git diff --name-status -C $ref_1 $ref_2 | grep -E '^M')"
	
	for file_name in $files_modified
	do
		if [ $no_difftool = 0 ]; then
			git difftool $ref_1 $ref_2 -- $file_name
		else
			# Export a new $PAGER value because git-diff redirects the output to the default
			# system pager. Instead, use cat to display the full diff with no paging, then
			# revert $PAGER to the original value
			old_pager="$PAGER"
			export PAGER=cat
			echo
			echo
			echo
			git diff $ref_1 $ref_2 -- $file_name
			export PAGER="$old_pager"
		fi
	done
fi

echo
echo "${txt_bold}Finished reviewing files between $ref_1 and $ref_2.${txt_normal}"

exit $?
